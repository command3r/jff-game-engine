// Generated by CoffeeScript 1.3.1
(function() {
  var Actor, Axis, Collision, CollisionBox, Direction, Point, Sprite, exports;

  Actor = (function() {

    Actor.name = 'Actor';

    function Actor() {}

    Actor.prototype.initialize = function(status) {
      this.status = status != null ? status : {};
    };

    return Actor;

  })();

  Actor.create = function() {
    return Actor.apply({}, arguments);
  };

  Axis = (function() {

    Axis.name = 'Axis';

    function Axis(name) {
      this.name = name;
    }

    Axis.prototype.isX = function() {
      return this.name === 'X';
    };

    Axis.prototype.isY = function() {
      return this.name === 'Y';
    };

    Axis.prototype.toString = function() {
      return this.name;
    };

    return Axis;

  })();

  exports = window;

  exports.Axis = Axis;

  Collision = (function() {

    Collision.name = 'Collision';

    function Collision() {}

    Collision.prototype.distanceX = function() {
      return this.offender.collisionBox.distanceX(this.target.collisionBox);
    };

    Collision.prototype.distanceY = function() {
      return this.offender.collisionBox.distanceY(this.target.collisionBox);
    };

    Collision.prototype.collidingOnX = function() {
      return _.include(this.collidingAxis(), axis.X);
    };

    Collision.prototype.collidingOnY = function() {
      return _.include(this.collidingAxis(), axis.Y);
    };

    Collision.prototype.collidingAxis = function() {
      var _this = this;
      return _.tap([], function(a) {
        if (_this.distanceX() <= 0) {
          a.push(axis.X);
        }
        if (_this.distanceY() <= 0) {
          return a.push(axis.Y);
        }
      });
    };

    return Collision;

  })();

  exports = window;

  exports.Collision = Collision;

  CollisionBox = (function() {

    CollisionBox.name = 'CollisionBox';

    function CollisionBox() {}

    CollisionBox.prototype.initialize = function(size) {
      this.size = size;
    };

    CollisionBox.prototype.move = function(axis, units) {
      return this.position = this.position.moved(axis, units);
    };

    CollisionBox.prototype.width = function() {
      return this.size.x;
    };

    CollisionBox.prototype.height = function() {
      return this.size.y;
    };

    CollisionBox.prototype.axisX = function() {
      return this.position.x;
    };

    CollisionBox.prototype.axisY = function() {
      return this.position.y;
    };

    CollisionBox.prototype.boundariesX = function() {
      return this.axisX() + this.width();
    };

    CollisionBox.prototype.boundariesY = function() {
      return this.axisY() + this.height();
    };

    CollisionBox.prototype.collides = function(collisionBox) {
      var a, b;
      a = this;
      b = collisionBox;
      return a.boundariesX() >= b.axisX() && a.axisX() <= b.boundariesX() && a.boundariesY() >= b.axisY() && a.axisY() <= b.boundariesY();
    };

    CollisionBox.prototype.distanceX = function(collisionBox) {
      var a, b;
      a = this;
      b = collisionBox;
      if (a.boundariesX() < b.axisX()) {
        return b.axisX() - a.boundariesX();
      }
      if (b.boundariesX() < a.axisX()) {
        return a.axisX() - b.boundariesX();
      }
      return 0;
    };

    CollisionBox.prototype.distanceY = function(collisionBox) {
      var a, b;
      a = this;
      b = collisionBox;
      if (a.boundariesY() < b.axisY()) {
        return b.axisY() - a.boundariesY();
      }
      if (b.boundariesY() < a.axisY()) {
        return a.axisY() - b.boundariesY();
      }
      return 0;
    };

    return CollisionBox;

  })();

  exports = window;

  exports.CollisionBox = CollisionBox;

  Direction = (function() {

    Direction.name = 'Direction';

    function Direction() {}

    Direction.prototype.isAxisX = function() {
      return this.axis.isX();
    };

    Direction.prototype.isAxisY = function() {
      return this.axis.isY();
    };

    Direction.prototype.toString = function() {
      return this.name;
    };

    return Direction;

  })();

  exports = window;

  exports.Direction = Direction;

  Point = (function() {

    Point.name = 'Point';

    function Point() {}

    Point.prototype.equal = function(b) {
      return this.x === b.x && this.y === b.y;
    };

    Point.prototype.plus = function(b) {
      return point(this.x + b.x, this.y + b.y);
    };

    Point.prototype.moved = function(_axis, units) {
      var x, y;
      x = _axis.isX() ? this.x + units : this.x;
      y = _axis.isY() ? this.y + units : this.y;
      return point(x, y);
    };

    return Point;

  })();

  exports = window;

  exports.Point = Point;

  Sprite = (function() {

    Sprite.name = 'Sprite';

    function Sprite() {}

    Sprite.prototype.initialize = function(collisionBox) {
      this.collisionBox = collisionBox;
    };

    Sprite.prototype.update = function() {};

    return Sprite;

  })();

}).call(this);
