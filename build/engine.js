// Generated by CoffeeScript 1.3.1
(function() {
  var Actor, Animation, AnimationSheet, Axis, Collision, CollisionBox, Direction, Duration, Frame, ImageMap, Loop, Point, Sprite, exports, imports, isCommonJS;

  Actor = (function() {

    Actor.name = 'Actor';

    function Actor() {}

    Actor.prototype.initialize = function(status) {
      this.status = status != null ? status : {};
    };

    return Actor;

  })();

  Actor.create = function() {
    return Actor.apply({}, arguments);
  };

  Animation = (function() {

    Animation.name = 'Animation';

    function Animation(_arg) {
      this.duration = _arg.duration, this.framesheet = _arg.framesheet;
    }

    return Animation;

  })();

  exports = window;

  exports.Animation = Animation;

  AnimationSheet = (function() {

    AnimationSheet.name = 'AnimationSheet';

    function AnimationSheet(_arg) {
      this.frames = _arg.frames;
    }

    AnimationSheet.prototype.onFrame = function(frame) {
      return this.frames[frame.n]();
    };

    return AnimationSheet;

  })();

  exports = window;

  exports.AnimationSheet = AnimationSheet;

  Axis = (function() {

    Axis.name = 'Axis';

    function Axis(name) {
      this.name = name;
    }

    Axis.prototype.isX = function() {
      return this.name === 'X';
    };

    Axis.prototype.isY = function() {
      return this.name === 'Y';
    };

    Axis.prototype.toString = function() {
      return this.name;
    };

    return Axis;

  })();

  exports = window;

  exports.Axis = Axis;

  Collision = (function() {

    Collision.name = 'Collision';

    function Collision() {}

    Collision.prototype.distanceX = function() {
      return this.offender.collisionBox.distanceX(this.target.collisionBox);
    };

    Collision.prototype.distanceY = function() {
      return this.offender.collisionBox.distanceY(this.target.collisionBox);
    };

    Collision.prototype.collidingOnX = function() {
      return _.include(this.collidingAxis(), axis.X);
    };

    Collision.prototype.collidingOnY = function() {
      return _.include(this.collidingAxis(), axis.Y);
    };

    Collision.prototype.collidingAxis = function() {
      var _this = this;
      return _.tap([], function(a) {
        if (_this.distanceX() <= 0) {
          a.push(axis.X);
        }
        if (_this.distanceY() <= 0) {
          return a.push(axis.Y);
        }
      });
    };

    return Collision;

  })();

  exports = window;

  exports.Collision = Collision;

  CollisionBox = (function() {

    CollisionBox.name = 'CollisionBox';

    function CollisionBox() {}

    CollisionBox.prototype.initialize = function(size) {
      this.size = size;
    };

    CollisionBox.prototype.move = function(axis, units) {
      return this.position = this.position.moved(axis, units);
    };

    CollisionBox.prototype.width = function() {
      return this.size.x;
    };

    CollisionBox.prototype.height = function() {
      return this.size.y;
    };

    CollisionBox.prototype.axisX = function() {
      return this.position.x;
    };

    CollisionBox.prototype.axisY = function() {
      return this.position.y;
    };

    CollisionBox.prototype.boundariesX = function() {
      return this.axisX() + this.width();
    };

    CollisionBox.prototype.boundariesY = function() {
      return this.axisY() + this.height();
    };

    CollisionBox.prototype.collides = function(collisionBox) {
      var a, b;
      a = this;
      b = collisionBox;
      return a.boundariesX() >= b.axisX() && a.axisX() <= b.boundariesX() && a.boundariesY() >= b.axisY() && a.axisY() <= b.boundariesY();
    };

    CollisionBox.prototype.distanceX = function(collisionBox) {
      var a, b;
      a = this;
      b = collisionBox;
      if (a.boundariesX() < b.axisX()) {
        return b.axisX() - a.boundariesX();
      }
      if (b.boundariesX() < a.axisX()) {
        return a.axisX() - b.boundariesX();
      }
      return 0;
    };

    CollisionBox.prototype.distanceY = function(collisionBox) {
      var a, b;
      a = this;
      b = collisionBox;
      if (a.boundariesY() < b.axisY()) {
        return b.axisY() - a.boundariesY();
      }
      if (b.boundariesY() < a.axisY()) {
        return a.axisY() - b.boundariesY();
      }
      return 0;
    };

    return CollisionBox;

  })();

  exports = window;

  exports.CollisionBox = CollisionBox;

  Direction = (function() {

    Direction.name = 'Direction';

    function Direction() {}

    Direction.prototype.isAxisX = function() {
      return this.axis.isX();
    };

    Direction.prototype.isAxisY = function() {
      return this.axis.isY();
    };

    Direction.prototype.toString = function() {
      return this.name;
    };

    return Direction;

  })();

  exports = window;

  exports.Direction = Direction;

  Duration = (function() {

    Duration.name = 'Duration';

    function Duration(seconds) {
      this.seconds = seconds;
      this.miliseconds = this.seconds * 1000;
    }

    Duration.prototype.isWithin = function(duration) {
      return this.miliseconds <= duration.miliseconds;
    };

    return Duration;

  })();

  Duration.fromMiliseconds = function(miliseconds) {
    return new Duration(miliseconds / 1000);
  };

  Duration.fromFPS = function(fps) {
    return new Duration(1 / fps);
  };

  imports = this || window;

  imports.Duration = Duration;

  Frame = (function() {

    Frame.name = 'Frame';

    function Frame(n, fps) {
      this.n = n;
      this.fps = fps;
      if (!(this.n > 0)) {
        throw 'Frame has to be > 0';
      }
      this.index = this.n - 1;
    }

    Frame.prototype.next = function() {
      var next;
      next = this.n + 1 <= this.fps ? this.n + 1 : 1;
      return new Frame(next, this.fps);
    };

    Frame.prototype.adjustedFor = function(fps) {
      var tick, ticks,
        _this = this;
      ticks = this.fps / fps;
      tick = _.find(_.range(1, fps + 1), function(i) {
        return _this.n < i * ticks;
      });
      return new Frame(tick || 1, fps);
    };

    return Frame;

  })();

  exports = this || window;

  exports.Frame = Frame;

  ImageMap = (function() {

    ImageMap.name = 'ImageMap';

    function ImageMap(_arg) {
      this.image = _arg.image, this.positions = _arg.positions;
      this.map = _.groupBy(this.positions, function(p) {
        return p.id;
      });
    }

    ImageMap.prototype.position = function(key) {
      return this.map[key];
    };

    return ImageMap;

  })();

  exports = this || window;

  exports.ImageMap = ImageMap;

  isCommonJS = !this.hasOwnProperty('window');

  if (isCommonJS) {
    Duration = require('./duration').Duration;
    Frame = require('./frame').Frame;
  }

  Loop = (function() {

    Loop.name = 'Loop';

    function Loop(_arg, operation) {
      this.duration = _arg.duration, this.fps = _arg.fps, this.nonStop = _arg.nonStop;
      this.operation = operation;
      this.tick = Duration.fromFPS(this.fps);
      if (!this.duration) {
        this.nonStop = true;
      }
    }

    Loop.prototype.start = function() {
      this.running = true;
      this.cycle = 0;
      this._stop = false;
      return this.interval = setInterval(this.callback(), this.tick.miliseconds);
    };

    Loop.prototype.stop = function() {
      return this._stop = true;
    };

    Loop.prototype.forceStop = function() {
      if (!this.running) {
        return;
      }
      clearInterval(this.interval);
      this.interval = null;
      return this._stop = this.running = false;
    };

    Loop.prototype.shouldStop = function() {
      if (this._stop) {
        return true;
      }
      if (!this.nonStop && !this.runningTime().isWithin(this.duration)) {
        return true;
      }
      return false;
    };

    Loop.prototype.runningTime = function() {
      return Duration.fromMiliseconds(this.cycle * this.tick.miliseconds);
    };

    Loop.prototype.updateFrame = function() {
      var _ref;
      return this.currentFrame = ((_ref = this.currentFrame) != null ? _ref.next() : void 0) || new Frame(1, this.fps);
    };

    Loop.prototype.callback = function() {
      var _this = this;
      return function() {
        _this.cycle++;
        if (_this.shouldStop()) {
          return _this.forceStop();
        }
        _this.running = true;
        return _this.operation(_this.updateFrame());
      };
    };

    return Loop;

  })();

  exports = this || window;

  exports.Loop = Loop;

  Point = (function() {

    Point.name = 'Point';

    function Point() {}

    Point.prototype.equal = function(b) {
      return this.x === b.x && this.y === b.y;
    };

    Point.prototype.plus = function(b) {
      return point(this.x + b.x, this.y + b.y);
    };

    Point.prototype.moved = function(_axis, units) {
      var x, y;
      x = _axis.isX() ? this.x + units : this.x;
      y = _axis.isY() ? this.y + units : this.y;
      return point(x, y);
    };

    return Point;

  })();

  exports = window;

  exports.Point = Point;

  Sprite = (function() {

    Sprite.name = 'Sprite';

    function Sprite() {}

    Sprite.prototype.initialize = function(collisionBox) {
      this.collisionBox = collisionBox;
    };

    Sprite.prototype.update = function() {};

    return Sprite;

  })();

}).call(this);
